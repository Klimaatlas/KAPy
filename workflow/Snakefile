# KAPy Workflow
#
# This snakemake workflow handles the processing of data for use
# in Klimaatlas-like products. 
#
# The pipeline can be run using
#    > snakemake --cores 1 <target>
#
# A list of available target rules can be obatined using
#   > snakemake -S
#
# Workflow configuration options are set in config.yaml
#

import KAPy
import os

#Setup-----------------------
#Load configuration 
configfile: "./config/config.yaml"  #Defined relative to execution directory
config=KAPy.validateConfig(config)
outDirs=config['dirs']

#Generate filename dicts
wf=KAPy.getWorkflow(config)

# Primary Variables---------------------------------
#Primary variable singular rule
def primaryVar_singular_rule(thisID):
    thisVarName=config['inputs'][thisID]['varID']
    rule:  
        name: f'primaryVar_{thisID}_files'
        output:
            os.path.join(outDirs['variables'],
                         f"{thisVarName}",
                         f"{thisVarName}_{{stem}}")
        input:
            lambda wildcards: 
                wf['primVars'][thisID][ os.path.join(outDirs['variables'],
                                                     thisVarName,
                                                     f"{thisVarName}_{wildcards.stem}")]
        run:
            KAPy.buildPrimVar(config=config,
                              inFiles=input,
                              outFile=output,
                              inpID=thisID)

#Plural rule
def primaryVar_plural_rule(thisID):
    rule:
        name: f'primaryVar_{thisID}'
        input:
            list(wf['primVars'][thisID].keys())
            
for pvID in wf['primVars'].keys():
    primaryVar_singular_rule(pvID)
    primaryVar_plural_rule(pvID)

#Run all indicators    
rule primaryVars:
    input:
        [list(thisInp.keys()) for thisInp in wf['primVars'].values()]
        

# Secondary variables -------------------------
# "Secondary variables" are calculated as new variables derived from primary variables.  
# Good examples include FWI, PoteEvap and SPI. 
# Singular rule
def secVar_singular_rule(thisID):
    thisVar=config['secondaryVars'][thisID]
    rule:  
        name: f'secondaryVar_{thisID}_files'
        output:
            os.path.join(outDirs['variables'],
                         f"{thisVar['outputVars']}",
                         f"{thisVar['outputVars']}_{{stem}}")
        input:
            os.path.join(outDirs['variables'],
                         f"{thisVar['inputVars']}",
                         f"{thisVar['inputVars']}_{{stem}}")
        run:
            KAPy.buildDerivedVar(config=config,
                                     inFiles=input, 
                                     outFile=output,
                                     thisVar=thisVar)
            
#Plural rule
def secVar_plural_rule(thisID):
    rule:
        name: f'secondaryVar_{thisID}'
        input:
            wf['secondaryVars'][thisID]['files']
            
for inpID in wf['secondaryVars'].keys():
    secVar_singular_rule(inpID)
    secVar_plural_rule(inpID)

#Run all plurals    
rule secondaryVars:
    input:
        [item for thisVar in wf['secondaryVars'].values() for item in thisVar['files'] ]
        
        
# Bias correction -------------------
# TODO

# Indicators ---------------------------------
# Create a loop over the indicators that defines the singular and plural rules
# as well as the combined run

#Indicator singular rule
def ind_singular_rule(thisID):
    thisInd=config['indicators'][thisID]
    rule:  
        name: f'indicator_{thisID}_files'
        output:
            os.path.join(outDirs['indicators'],
                         f"{thisID}",
                         f"{thisID}_{{stem}}")
        input:
            lambda wildcards: 
                wf['indicators'][thisID][ os.path.join(outDirs['indicators'],
                                                     thisID,
                                                     f"{thisID}_{wildcards.stem}")]
        run:
            KAPy.calculateIndicators(config=config,
                                     inFile=input,
                                     outFile=output,
                                     indID=thisID)

#Indicator plural rule
def ind_plural_rule(thisID):
    rule:
        name: f'indicator_{thisID}'
        input:
            list(wf['indicators'][thisID].keys())
            
for indID in config['indicators'].keys():
    ind_singular_rule(indID)
    ind_plural_rule(indID)

#Run all indicators    
rule indicators:
    input:
        [f for thisInd in wf['indicators'].values() for f in thisInd.keys()]

# Regridding  ---------------------------------
# Combining everything into an ensemble requires that they are all on a common grid
# This step is optional but if the models are not on a common grid, this will cause failure 
# when we come to the ensstats generation
if config['outputGrid']['regriddingEngine']!='None':
    rule regrid:
        input:
            list(wf['regridded'].keys())

    rule regrid_file:
        output:
            this=os.path.join(outDirs['regridded'],"{indID}","{fname}")
        input:
            lambda wildcards: wf['regridded'][os.path.join(outDirs['regridded'],
                                                           wildcards.indID,
                                                           wildcards.fname)]
        run:
            KAPy.regrid(config,input,output)


# Enssemble Statistics ---------------------------------
# Now we can combine them into ensembles
#Plural rule
rule ensstats:
    input:
        list(wf['ensstats'].keys())

#Singular rule
rule ensstats_file:
    output:
        os.path.join(outDirs['ensstats'],"{es}")
    input:
        lambda wildcards: wf['ensstats'][os.path.join(outDirs['ensstats'],wildcards.es)]
    run:
        KAPy.generateEnsstats(config,input,output)


#Areal statistics------------------
#Areal statistics are calculated for both the enssemble statistics and individual members
#Note that we don't include the combined statistics in the workflow, as we would to be able to
#overwrite the naming of this output file from e.g. another project.
rule arealstats:
    input:
        list(wf['arealstats'].keys())
    output:
        os.path.join(outDirs['arealstats'],'Areal_statistics.csv')
    run:
        KAPy.combineArealstats(config,input,output)


#Singular rule
rule arealstats_file:
    output:
        os.path.join(outDirs['arealstats'],'{fname}')
    input:
        lambda wildcards: wf['arealstats'][os.path.join(outDirs['arealstats'],
                                                        wildcards.fname)]
    run:
        KAPy.generateArealstats(config,input,output)

# Outputs ---------------------------------
# Plots, amongst other things

#Plots
rule plots:
    input:
        list(wf['plots'].keys())
        
rule plots_lineplots:
    output:
        os.path.join(outDirs['plots'],'{indID}_lineplot.png')
    input:
        lambda wildcards: wf['plots'][os.path.join(outDirs['plots'],
                                                   f"{wildcards.indID}_lineplot.png")]
    run:
        KAPy.makeLineplot(config,wildcards.indID,input,output)

rule plots_boxplots:
    output:
        os.path.join(outDirs['plots'],'{indID}_boxplot.png')
    input:
        lambda wildcards: wf['plots'][os.path.join(outDirs['plots'],
                                                   f"{wildcards.indID}_boxplot.png")]
    run:
        KAPy.makeBoxplot(config,wildcards.indID,input,output)

rule plots_spatial:
    output:
        os.path.join(outDirs['plots'],'{indID}_spatial.png')
    input:
        lambda wildcards: wf['plots'][os.path.join(outDirs['plots'],
                                                   f"{wildcards.indID}_spatial.png")]
    run:
        KAPy.makeSpatialplot(config,wildcards.indID,input,output)
        

#All-------------------
rule all:
    input:
        wf['all'],
        rules.arealstats.output
    default_target: True

